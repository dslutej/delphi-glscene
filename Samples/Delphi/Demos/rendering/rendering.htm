<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=iso-8859-1"
 http-equiv="Content-Type">
  <meta content="Microsoft FrontPage 5.0" name="GENERATOR">
  <title>Rendering demos</title>
</head>
<body style="" lang="FR" vlink="#800080" link="#0000ff"
 bgcolor="#ffffff">
<p class="MsoPlainText"><font face="Courier New" size="4"><b>Rendering
demos&nbsp;:</b></font></p>
<ul>
  <li><a href="tobitmap/tobitmap.dpr"><b>tobitmap</b></a><b>&nbsp;:</b>
    <ul>
      <li>getting viewer content into a TBitmap with CreateSnapShot</li>
      <li>rendering to a high resolution bitmap suitable for printing</li>
    </ul>
  </li>
  <li><a href="culling/culling.dpr"><b>culling</b></a><b>&nbsp;:</b>
    <ul>
      <li>using and selecting scene culling (object-based or
hierarchical)</li>
      <li>visualizing impact of scene culling on frame rate</li>
    </ul>
  </li>
  <li><a href="memviewer/memviewer.dpr"><b>memviewer</b></a><b>&nbsp;:</b>
    <ul>
      <li>using the TGLMemoryViewer for off-screen rendering</li>
      <li>using off-screen render result in a texture</li>
      <li>controling VSync</li>
    </ul>
  </li>
  <li><a href="fullscreen/fullscreen.dpr"><b>fullscreen</b></a><b>&nbsp;:</b>
    <ul>
      <li>basic sample for TGLFullScreenViewer to go fullscreen and
switch screen resolution</li>
      <li>uses TGLCanvas to render a 2D overlay mouse reticle</li>
    </ul>
  </li>
  <li><a href="basicsdl/basicsdl.dpr"><b>basicsdl</b></a><b>&nbsp;:</b>
    <ul>
      <li>basic sample for TGLSDLViewer and using SDL</li>
      <li>cube environment mapping</li>
    </ul>
  </li>
  <li><a href="OctreeDemo/OctreeDemo.dpr"><b>OctreeDemo</b></a><b>&nbsp;:</b>
    <ul>
      <li>demo of using an Octree to cull dynamic objects</li>
    </ul>
  </li>
  <li><a href="lining/lining.dpr"><b>lining</b></a><b> :</b>
    <ul>
      <li>demo of using TGLOutlineShader and TGLHiddenlineShader<br>
      </li>
    </ul>
  </li>
  <li><a href="fog/fog.dpr"><b>fog</b></a><b> :</b>
    <ul>
      <li>demo showing the use of fog in GLScene<br>
      </li>
    </ul>
  </li>
  <li><a href="invariance/invariance.dpr"><b>invariance</b></a><b> :</b>
    <ul>
      <li>demo showing the use of invariance in GLScene (Makes a foggy surface on texture)<br>
      </li>
    </ul>
  </li>
  <li><a href="multiproxy/multiproxy.dpr"><b>multiproxy</b></a><b> :</b>
    <ul>
      <li>Illustrates the use of TGLMultiProxy to perform discreet LOD.<br>
      </li>
    </ul>
  </li>
  <li><a href="SkyBox/Project1.dpr"><b>SkyBox</b></a><b> :</b>
    <ul>
      <li>Example using GLSkybox... or 2.<br>
      </li>
    </ul>
  </li>
  <li><a href="quadtreevisculling/QuadtreeVisCulling.dpr"><b>Quadtree Visibility Culling</b></a><b> :</b>
    <ul>
      <li>demo using Quadtrees to perform visibility culling.<br>
      </li>
    </ul>
  </li>  
  <li><a href="Blur/Project1.dpr"><b>Blur</b></a><b> :</b>
    <ul>
      <li>Adding a GLBlur to an object will make it blur only that object. Adding it to the scene root will blur all the scene.<br>
      </li>
    </ul>
  </li>
  <li><a href="BlurAdvanced/BlurAdvanced.dpr"><b>BlurAdvanced</b></a><b> :</b>
    <ul>
      <li>A more advanced blur demo.<br>
      </li>
    </ul>
  </li>
  <li><a href="bunnybump/bunnybump.dpr"><b>bunnybump</b></a><b> :</b>
    <ul>
      <li>Using the GLBumpShader for object space bump mapping. There are currently 2 bump methods: a dot3 texture combiner and a basic ARB 
   fragment program. Specular: Blinn or Phong<br>
      </li>
      <li>Demonstrates checking for card capability and responding with program limiting changes.</li>
    </ul>
  </li>

  <li><a href="celshading/celshading.dpr"><b>celshading</b></a><b> :</b>
    <ul>
      <li>GLCelShader component: GLTexturedCelShader<br>
      </li>
      <li>This could use a Check for card capability and response with program limiting changes.</li>
    </ul>
  </li>

  <li><a href="phong/phong.dpr"><b>Per-Pixel phong shading demo.</b></a><b> :</b>
    <ul>
      <li>The TGLPhongShader implements phong shading through the use of an ARB vertex and fragment program.<br>
      </li>
      <li>This could use a Check for card capability and response with program limiting changes.</li>
    </ul>
  </li>

</ul>
<p><a href="../demos.htm">Back</a></p>
</body>
</html>